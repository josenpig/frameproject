<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xingji.frameproject.mybatis.dao.SaleReturnDetailsDao">

    <resultMap type="com.xingji.frameproject.mybatis.entity.SaleReturnDetails" id="SaleReturnDetailsMap">
        <result property="id" column="id" jdbcType="INTEGER"/>
        <result property="returnId" column="return_id" jdbcType="VARCHAR"/>
        <result property="productId" column="product_id" jdbcType="VARCHAR"/>
        <result property="productName" column="product_name" jdbcType="VARCHAR"/>
        <result property="returnNum" column="return_num" jdbcType="INTEGER"/>
        <result property="productUnit" column="unit_name" jdbcType="VARCHAR"/>
        <result property="gramHeavy" column="gram_heavy" jdbcType="VARCHAR"/>
        <result property="ingredient" column="ingredient" jdbcType="VARCHAR"/>
        <result property="productSpec" column="product_spec" jdbcType="VARCHAR"/>
        <result property="productDescribe" column="product_describe" jdbcType="VARCHAR"/>
        <result property="remark" column="remarks" jdbcType="VARCHAR"/>
        <result property="depot" column="depot" jdbcType="VARCHAR"/>
        <result property="saleUnitPrice" column="sale_unit_price" jdbcType="NUMERIC"/>
        <result property="saleMoney" column="sale_money" jdbcType="NUMERIC"/>
    </resultMap>

    <!--查询单个-->
    <select id="queryById" resultMap="SaleReturnDetailsMap">
        select a.id, a.return_id, a.product_id, b.product_name, a.return_num,
        c.unit_name,  b.gram_heavy,  b.ingredient,  b.product_spec,  b.product_describe,
        b.remarks, a.depot,  a.sale_unit_price,  a.sale_money
        from sale_return_details a
        INNER JOIN base_product b on a.product_id=b.product_id
        INNER JOIN base_unit c on b.unit_id=c.unit_id
        where return_id = #{returnId}
    </select>

    <!--查询指定行数据-->
    <select id="queryAllByLimit" resultMap="SaleReturnDetailsMap">
        select
          id, return_id, product_id, return_num, depot, sale_unit_price, sale_money
        from frameproject.sale_return_details
        limit #{offset}, #{limit}
    </select>

    <!--通过实体作为筛选条件查询-->
    <select id="queryAll" resultMap="SaleReturnDetailsMap">
        select
        id, return_id, product_id, return_num, depot, sale_unit_price, sale_money
        from frameproject.sale_return_details
        <where>
            <if test="id != null">
                and id = #{id}
            </if>
            <if test="returnId != null and returnId != ''">
                and return_id = #{returnId}
            </if>
            <if test="productId != null and productId != ''">
                and product_id = #{productId}
            </if>
            <if test="returnNum != null">
                and return_num = #{returnNum}
            </if>
            <if test="depot != null and depot != ''">
                and depot = #{depot}
            </if>
            <if test="saleUnitPrice != null">
                and sale_unit_price = #{saleUnitPrice}
            </if>
            <if test="saleMoney != null">
                and sale_money = #{saleMoney}
            </if>
        </where>
    </select>

    <!--新增所有列-->
    <insert id="insert" keyProperty="id" useGeneratedKeys="true">
        insert into frameproject.sale_return_details(return_id, product_id, return_num, depot, sale_unit_price, sale_money)
        values (#{returnId}, #{productId}, #{returnNum}, #{depot}, #{saleUnitPrice}, #{saleMoney})
    </insert>

    <insert id="insertBatch" keyProperty="id" useGeneratedKeys="true">
        insert into frameproject.sale_return_details(return_id, product_id, return_num, depot, sale_unit_price,
        sale_money)
        values
        <foreach collection="entities" item="entity" separator=",">
            (#{entity.returnId}, #{entity.productId}, #{entity.returnNum}, #{entity.depot}, #{entity.saleUnitPrice},
            #{entity.saleMoney})
        </foreach>
    </insert>

    <insert id="insertOrUpdateBatch" keyProperty="id" useGeneratedKeys="true">
        insert into frameproject.sale_return_details(return_id, product_id, return_num, depot, sale_unit_price,
        sale_money)
        values
        <foreach collection="entities" item="entity" separator=",">
            (#{entity.returnId}, #{entity.productId}, #{entity.returnNum}, #{entity.depot}, #{entity.saleUnitPrice},
            #{entity.saleMoney})
        </foreach>
        on duplicate key update
        return_id = values(return_id) , product_id = values(product_id) , return_num = values(return_num) , depot =
        values(depot) , sale_unit_price = values(sale_unit_price) , sale_money = values(sale_money)
    </insert>

    <!--通过主键修改数据-->
    <update id="update">
        update frameproject.sale_return_details
        <set>
            <if test="returnId != null and returnId != ''">
                return_id = #{returnId},
            </if>
            <if test="productId != null and productId != ''">
                product_id = #{productId},
            </if>
            <if test="returnNum != null">
                return_num = #{returnNum},
            </if>
            <if test="depot != null and depot != ''">
                depot = #{depot},
            </if>
            <if test="saleUnitPrice != null">
                sale_unit_price = #{saleUnitPrice},
            </if>
            <if test="saleMoney != null">
                sale_money = #{saleMoney},
            </if>
        </set>
        where id = #{id}
    </update>

    <!--通过主键删除-->
    <delete id="deleteById">
        delete from frameproject.sale_return_details where id = #{id}
    </delete>

</mapper>

